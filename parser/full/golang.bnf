/*----------------------------------------------------------------------------*/
/* Lexical Part */

/* keywords */
kw_break        : 'b' 'r' 'e' 'a' 'k' ;
kw_capchan      : 'c' 'a' 'p' 'c' 'h' 'a' 'n' ;
kw_case         : 'c' 'a' 's' 'e' ;
kw_chan         : 'c' 'h' 'a' 'n' ;
kw_const        : 'c' 'o' 'n' 's' 't' ;
kw_continue     : 'c' 'o' 'n' 't' 'i' 'n' 'u' 'e' ;
kw_default      : 'd' 'e' 'f' 'a' 'u' 'l' 't' ;
kw_defer        : 'd' 'e' 'f' 'e' 'r' ;
kw_else         : 'e' 'l' 's' 'e' ;
kw_fallthrough  : 'f' 'a' 'l' 'l' 't' 'h' 'r' 'o' 'u' 'g' 'h' ;
kw_for          : 'f' 'o' 'r' ;
kw_func         : 'f' 'u' 'n' 'c' ;
kw_go           : 'g' 'o' ;
kw_goto         : 'g' 'o' 't' 'o' ;
kw_if           : 'i' 'f' ;
kw_import       : 'i' 'm' 'p' 'o' 'r' 't' ;
kw_interface    : 'i' 'n' 't' 'e' 'r' 'f' 'a' 'c' 'e' ;
kw_make         : 'm' 'a' 'k' 'e' ;
kw_map          : 'm' 'a' 'p' ;
kw_package      : 'p' 'a' 'c' 'k' 'a' 'g' 'e' ;
kw_range        : 'r' 'a' 'n' 'g' 'e' ;
kw_return       : 'r' 'e' 't' 'u' 'r' 'n' ;
kw_select       : 's' 'e' 'l' 'e' 'c' 't' ;
kw_struct       : 's' 't' 'r' 'u' 'c' 't' ;
kw_switch       : 's' 'w' 'i' 't' 'c' 'h' ;
kw_type         : 't' 'y' 'p' 'e' ;
kw_var          : 'v' 'a' 'r' ;


/* operators */
op_plus         : '+' ;
op_minus        : '-' ;
op_ast          : '*' ;
op_dash         : '/' ;
op_perc         : '%' ;
op_amp          : '&' ;
op_bar          : '|' ;
op_circ         : '^' ;
op_leftsh       : '<' '<' ;
op_rightsh      : '>' '>' ;
op_ampcirc      : '&' '^' ;
op_pluseq       : '+' '=' ;
op_minuseq      : '-' '=' ;
op_asteq        : '*' '=' ;
op_dasheq       : '/' '=' ;
op_perceq       : '%' '=' ;
op_ampeq        : '&' '=' ;
op_bareq        : '|' '=' ;
op_circeq       : '^' '=' ;
op_leftsheq     : '<' '<' '=' ;
op_rightsheq    : '>' '>' '=' ;
op_ampcirceq    : '&' '^' '=' ;
op_ampamp       : '&' '&' ;
op_barbar       : '|' '|' ;
op_leftarrow    : '<' '-' ;
op_plusplus     : '+' '+' ;
op_minusminus   : '-' '-' ;
op_eqeq         : '=' '=' ;
op_le           : '<' ;
op_gt           : '>' ;
op_eq           : '=' ;
op_not          : '!' ;
op_noteq        : '!' '=' ;
op_leq          : '<' '=' ;
op_geq          : '>' '=' ;
op_assign       : ':' '=' ;


/* symbols */
ldots           : '.' '.' '.' ;
lparen          : '(' ;
rparen          : ')' ;
lbrack          : '[' ;
rbrack          : ']' ;
lcurl           : '{' ;
rcurl           : '}' ;
comma           : ',' ;
dot             : '.' ;
semicolon       : ';' ;
colon           : ':' ;

_letter         : 'a'-'z' | 'A'-'Z' | '_' ;
_digit          : '0'-'9' ;
id              : _letter {_letter | _digit} ;


/* int lits */
_decimal_digit  : '0'-'9' ;
_binary_digit   : '0' | '1' ;
_octal_digit    : '0'-'7' ;
_hex_digit      : '0'-'9' | 'a'-'f' | 'A'-'F' ;

_decimal_digits : _decimal_digit { [ '_' ] _decimal_digit } ;
_binary_digits  : _binary_digit { [ '_' ] _binary_digit } ;
_octal_digits   : _octal_digit { [ '_' ] _octal_digit } ;
_hex_digits     : _hex_digit { [ '_' ] _hex_digit } ;

_decimal_lit    : '0' | ( '1'-'9' ) [ [ '_' ] _decimal_digits ] ;
_binary_lit     : '0' ( 'b' | 'B' ) [ '_' ] _binary_digits ;
_octal_lit      : '0' [ 'o' | 'O' ] [ '_' ] _octal_digits ;
_hex_lit        : '0' ( 'x' | 'X' ) [ '_' ] _hex_digits ;
int_lit         : _decimal_lit | _binary_lit | _octal_lit | _hex_lit ;


/* string lits */
_escaped_char   : '\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | '\'' | '`' ) ;
_raw_string     : '`' { . } '`' ;
_interp_string  : '"' { . | _escaped_char } '"' ;
string_lit      : _raw_string | _interp_string ;


/* comments and whitespace */
_line_comment : '/' '/' {.} '\n' ;
_comment      : '/' '*' {.} '*' '/' ;
!whitespace : ' ' | '\t' | '\n' | '\r' | _line_comment | _comment ;


/*----------------------------------------------------------------------------*/
/* Syntax Part */

<< import generator "github.com/nfk93/gocap/generator" >>

SourceFile    : PackageClause ImportDecls TopLevelDecl << nil, nil >> ;

PackageClause : kw_package PackageName << nil, nil >> ;
PackageName   : id << nil, nil >> ;

ImportDecls   : ImportDecl ImportDecls << nil, nil >>
              | empty << nil, nil >> ;
ImportDecl    : kw_import ImportSpec << nil, nil >>
              | kw_import lparen ImportSpecs rparen << nil, nil >> ;
ImportSpecs   : ImportSpec ImportSpecs << nil, nil >>
              | empty << nil, nil >> ;
ImportSpec    : dot ImportPath << nil, nil >>
              | PackageName ImportPath << nil, nil >>
              | ImportPath << nil, nil >> ;
ImportPath    : string_lit << nil, nil >> ;
