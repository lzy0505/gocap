// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/nfk93/gocap/parser/simple/ast"

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : SourceFile	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SourceFile : NewLineOpts PackageClause ImportDecls TopLevelDecls	<< ast.NewSourceFile(X[1], X[2], X[3]) >>`,
		Id:         "SourceFile",
		NTType:     1,
		Index:      1,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewSourceFile(X[1], X[2], X[3])
		},
	},
	ProdTabEntry{
		String: `Terminators : NewLineOpts Terminator NewLineOpts	<<  >>`,
		Id:         "Terminators",
		NTType:     2,
		Index:      2,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Terminator : newln	<<  >>`,
		Id:         "Terminator",
		NTType:     3,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Terminator : semic	<<  >>`,
		Id:         "Terminator",
		NTType:     3,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NewLineOpts : NewLineOpts newln	<<  >>`,
		Id:         "NewLineOpts",
		NTType:     4,
		Index:      5,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `NewLineOpts : empty	<<  >>`,
		Id:         "NewLineOpts",
		NTType:     4,
		Index:      6,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `PackageClause : kw_package id Terminators	<< X[1], nil >>`,
		Id:         "PackageClause",
		NTType:     5,
		Index:      7,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ImportDecls : ImportDecls ImportDecl Terminators	<< ast.AppendImportLists(X[0], X[1]) >>`,
		Id:         "ImportDecls",
		NTType:     6,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendImportLists(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ImportDecls : empty	<< make([]ast.Import, 0), nil >>`,
		Id:         "ImportDecls",
		NTType:     6,
		Index:      9,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return make([]ast.Import, 0), nil
		},
	},
	ProdTabEntry{
		String: `ImportDecl : kw_import ImportSpec	<< X[1], nil >>`,
		Id:         "ImportDecl",
		NTType:     7,
		Index:      10,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `ImportDecl : kw_import lparen ImportSpecs rparen	<< X[2], nil >>`,
		Id:         "ImportDecl",
		NTType:     7,
		Index:      11,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[2], nil
		},
	},
	ProdTabEntry{
		String: `ImportSpecs : ImportSpecs ImportSpec Terminators	<< ast.AppendImportLists(X[0], X[1]) >>`,
		Id:         "ImportSpecs",
		NTType:     8,
		Index:      12,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendImportLists(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ImportSpecs : empty	<< make([]ast.Import, 0), nil >>`,
		Id:         "ImportSpecs",
		NTType:     8,
		Index:      13,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return make([]ast.Import, 0), nil
		},
	},
	ProdTabEntry{
		String: `ImportSpec : dot ImportPath	<< ast.NewImport(X[1], true) >>`,
		Id:         "ImportSpec",
		NTType:     9,
		Index:      14,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewImport(X[1], true)
		},
	},
	ProdTabEntry{
		String: `ImportSpec : id ImportPath	<< ast.NewNamedImport(X[0], X[1]) >>`,
		Id:         "ImportSpec",
		NTType:     9,
		Index:      15,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNamedImport(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ImportSpec : ImportPath	<< ast.NewImport(X[0], false) >>`,
		Id:         "ImportSpec",
		NTType:     9,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewImport(X[0], false)
		},
	},
	ProdTabEntry{
		String: `ImportPath : string_lit	<< X[0], nil >>`,
		Id:         "ImportPath",
		NTType:     10,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelDecls : TopLevelDecls TopLevelDecl NewLineOpts	<< ast.AppendCodeList(X[0], X[1]) >>`,
		Id:         "TopLevelDecls",
		NTType:     11,
		Index:      18,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendCodeList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `TopLevelDecls : empty	<< (make([]ast.Code, 0)), nil >>`,
		Id:         "TopLevelDecls",
		NTType:     11,
		Index:      19,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return (make([]ast.Code, 0)), nil
		},
	},
	ProdTabEntry{
		String: `TopLevelDecl : Declaration	<< X[0], nil >>`,
		Id:         "TopLevelDecl",
		NTType:     12,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelDecl : FunctionDecl Terminators	<< X[0], nil >>`,
		Id:         "TopLevelDecl",
		NTType:     12,
		Index:      21,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TopLevelDecl : MethodDecl Terminators	<< X[0], nil >>`,
		Id:         "TopLevelDecl",
		NTType:     12,
		Index:      22,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FunctionDecl : kw_func id Signature FunctionBody	<< ast.NewFunctionDecl(X[1], X[2], X[3]) >>`,
		Id:         "FunctionDecl",
		NTType:     13,
		Index:      23,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFunctionDecl(X[1], X[2], X[3])
		},
	},
	ProdTabEntry{
		String: `MethodDecl : kw_func Receiver id Signature FunctionBody	<< ast.NewMethodDecl(X[1], X[2], X[3], X[4]) >>`,
		Id:         "MethodDecl",
		NTType:     14,
		Index:      24,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewMethodDecl(X[1], X[2], X[3], X[4])
		},
	},
	ProdTabEntry{
		String: `FunctionBody : Block	<< X[0], nil >>`,
		Id:         "FunctionBody",
		NTType:     15,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FunctionBody : empty	<< ast.Unsupported("UNSUPPORTED: function declarations must be follow by a body") >>`,
		Id:         "FunctionBody",
		NTType:     15,
		Index:      26,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Unsupported("UNSUPPORTED: function declarations must be follow by a body")
		},
	},
	ProdTabEntry{
		String: `Signature : Parameters Result	<< ast.NewSignature(X[0], X[1]) >>`,
		Id:         "Signature",
		NTType:     16,
		Index:      27,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewSignature(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Result : Type	<< X[0], nil >>`,
		Id:         "Result",
		NTType:     17,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Result : lparen TypeList rparen	<< X[1], nil >>`,
		Id:         "Result",
		NTType:     17,
		Index:      29,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Result : Parameters	<< ast.Unsupported("UNSUPPORTED: identifiers in result type not supported") >>`,
		Id:         "Result",
		NTType:     17,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Unsupported("UNSUPPORTED: identifiers in result type not supported")
		},
	},
	ProdTabEntry{
		String: `Result : empty	<< (make([]ast.Typ, 0)), nil >>`,
		Id:         "Result",
		NTType:     17,
		Index:      31,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return (make([]ast.Typ, 0)), nil
		},
	},
	ProdTabEntry{
		String: `Parameters : lparen ParameterList rparen	<< X[1], nil >>`,
		Id:         "Parameters",
		NTType:     18,
		Index:      32,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Parameters : lparen rparen	<< make([]ast.ParameterDecl, 0), nil >>`,
		Id:         "Parameters",
		NTType:     18,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return make([]ast.ParameterDecl, 0), nil
		},
	},
	ProdTabEntry{
		String: `ParameterList : ParameterList comma NewLineOpts ParameterDecl	<< ast.ConcatParameterLists(X[0], X[2]) >>`,
		Id:         "ParameterList",
		NTType:     19,
		Index:      34,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ConcatParameterLists(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ParameterList : ParameterDecl	<< X[0], nil >>`,
		Id:         "ParameterList",
		NTType:     19,
		Index:      35,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ParameterDecl : IdentifierList Type	<< ast.MakeParameterDecl(X[0], X[1]) >>`,
		Id:         "ParameterDecl",
		NTType:     20,
		Index:      36,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.MakeParameterDecl(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ParameterDecl : IdentifierList "..." Type	<< ast.Unsupported("UNSUPPORTED: variadic function arguments are not supported") >>`,
		Id:         "ParameterDecl",
		NTType:     20,
		Index:      37,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Unsupported("UNSUPPORTED: variadic function arguments are not supported")
		},
	},
	ProdTabEntry{
		String: `IdentifierList : IdentifierList comma NewLineOpts id	<< ast.AppendIdList(X[0], X[3]) >>`,
		Id:         "IdentifierList",
		NTType:     21,
		Index:      38,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendIdList(X[0], X[3])
		},
	},
	ProdTabEntry{
		String: `IdentifierList : id	<< ast.NewIdList(X[0]) >>`,
		Id:         "IdentifierList",
		NTType:     21,
		Index:      39,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIdList(X[0])
		},
	},
	ProdTabEntry{
		String: `Receiver : lparen id op_ast id rparen	<< ast.NewPointerReceiver(X[1], X[3]) >>`,
		Id:         "Receiver",
		NTType:     22,
		Index:      40,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPointerReceiver(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Receiver : lparen id id rparen	<< ast.NewReceiver(X[1], X[2]) >>`,
		Id:         "Receiver",
		NTType:     22,
		Index:      41,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewReceiver(X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Declaration : ConstDecl	<< X[0], nil >>`,
		Id:         "Declaration",
		NTType:     23,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Declaration : VarDecl	<< ast.Unsupported("Top level variables are not allow in cgo!") >>`,
		Id:         "Declaration",
		NTType:     23,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Unsupported("Top level variables are not allow in cgo!")
		},
	},
	ProdTabEntry{
		String: `Declaration : TypeDecl	<< X[0], nil >>`,
		Id:         "Declaration",
		NTType:     23,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ConstDecl : kw_const ConstSpec	<< ast.NewConstDeclBlock(X[1]) >>`,
		Id:         "ConstDecl",
		NTType:     24,
		Index:      45,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstDeclBlock(X[1])
		},
	},
	ProdTabEntry{
		String: `ConstDecl : kw_const lparen NewLineOpts ConstSpecs rparen	<< ast.NewConstDeclBlock(X[3]) >>`,
		Id:         "ConstDecl",
		NTType:     24,
		Index:      46,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstDeclBlock(X[3])
		},
	},
	ProdTabEntry{
		String: `ConstSpecs : ConstSpec ConstSpecs	<< ast.ConcatConstDecls(X[0], X[1]) >>`,
		Id:         "ConstSpecs",
		NTType:     25,
		Index:      47,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ConcatConstDecls(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ConstSpecs : ConstSpec	<< X[0], nil >>`,
		Id:         "ConstSpecs",
		NTType:     25,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ConstSpec : IdentifierList Type op_eq ConstLit Terminator	<< ast.NewConsts(X[0], X[1], X[3]) >>`,
		Id:         "ConstSpec",
		NTType:     26,
		Index:      49,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConsts(X[0], X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `ConstSpec : IdentifierList op_eq ConstLit Terminator	<< ast.NewUntypedConsts(X[0], X[2]) >>`,
		Id:         "ConstSpec",
		NTType:     26,
		Index:      50,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewUntypedConsts(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `ConstSpec : IdentifierList Terminator	<< ast.NewUninitializedConsts(X[0]) >>`,
		Id:         "ConstSpec",
		NTType:     26,
		Index:      51,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewUninitializedConsts(X[0])
		},
	},
	ProdTabEntry{
		String: `ConstLit : NewLineOpts Skips	<< X[1], nil >>`,
		Id:         "ConstLit",
		NTType:     27,
		Index:      52,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Skips : SkipNoLineBreak Skips	<< ast.ConcatTokens(X[0], X[1]) >>`,
		Id:         "Skips",
		NTType:     28,
		Index:      53,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ConcatTokens(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Skips : SkipNoLineBreak	<< ast.ConcatTokens(X[0]) >>`,
		Id:         "Skips",
		NTType:     28,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.ConcatTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `VarDecl : kw_var VarSpec	<<  >>`,
		Id:         "VarDecl",
		NTType:     29,
		Index:      55,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarDecl : kw_var lparen NewLineOpts VarSpecs NewLineOpts rparen	<<  >>`,
		Id:         "VarDecl",
		NTType:     29,
		Index:      56,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarSpecs : VarSpecs VarSpec Terminators	<<  >>`,
		Id:         "VarSpecs",
		NTType:     30,
		Index:      57,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarSpecs : empty	<<  >>`,
		Id:         "VarSpecs",
		NTType:     30,
		Index:      58,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VarSpec : IdentifierList Type op_eq ExpressionList	<<  >>`,
		Id:         "VarSpec",
		NTType:     31,
		Index:      59,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarSpec : IdentifierList Type	<<  >>`,
		Id:         "VarSpec",
		NTType:     31,
		Index:      60,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarSpec : IdentifierList op_eq ExpressionList	<<  >>`,
		Id:         "VarSpec",
		NTType:     31,
		Index:      61,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpressionList : ExpressionList Skip	<<  >>`,
		Id:         "ExpressionList",
		NTType:     32,
		Index:      62,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpressionList : empty	<<  >>`,
		Id:         "ExpressionList",
		NTType:     32,
		Index:      63,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `TypeDecl : empty	<< nil, nil >>`,
		Id:         "TypeDecl",
		NTType:     33,
		Index:      64,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Block : lcurl BlockContents rcurl	<< ast.NewBlock(X[1]) >>`,
		Id:         "Block",
		NTType:     34,
		Index:      65,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBlock(X[1])
		},
	},
	ProdTabEntry{
		String: `BlockContents : BlockContents BlockContent	<< ast.AppendCodeList(X[0], X[1]) >>`,
		Id:         "BlockContents",
		NTType:     35,
		Index:      66,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendCodeList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `BlockContents : BlockContent	<< ast.NewBlockContentList(X[0]) >>`,
		Id:         "BlockContents",
		NTType:     35,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBlockContentList(X[0])
		},
	},
	ProdTabEntry{
		String: `BlockContent : Block	<< X[0], nil >>`,
		Id:         "BlockContent",
		NTType:     36,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BlockContent : AssignExpr	<< X[0], nil >>`,
		Id:         "BlockContent",
		NTType:     36,
		Index:      69,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BlockContent : ChannelSend	<< X[0], nil >>`,
		Id:         "BlockContent",
		NTType:     36,
		Index:      70,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BlockContent : Skip	<< X[0], nil >>`,
		Id:         "BlockContent",
		NTType:     36,
		Index:      71,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `AssignExpr : id op_assign kw_make lparen kw_capchan Type rparen	<< ast.NewCapChanMake(X[0], X[5]) >>`,
		Id:         "AssignExpr",
		NTType:     37,
		Index:      72,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCapChanMake(X[0], X[5])
		},
	},
	ProdTabEntry{
		String: `AssignExpr : id op_assign kw_make lparen kw_chan Type rparen	<< ast.NewChanMake(X[0], X[5]) >>`,
		Id:         "AssignExpr",
		NTType:     37,
		Index:      73,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewChanMake(X[0], X[5])
		},
	},
	ProdTabEntry{
		String: `AssignExpr : id op_assign kw_make lparen kw_chan Type comma	<< ast.Unsupported("UNSUPPORTED: buffered channels not supported") >>`,
		Id:         "AssignExpr",
		NTType:     37,
		Index:      74,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.Unsupported("UNSUPPORTED: buffered channels not supported")
		},
	},
	ProdTabEntry{
		String: `AssignExpr : id op_assign op_longlarrow id	<< ast.NewCapChanReceive(X[0], X[3]) >>`,
		Id:         "AssignExpr",
		NTType:     37,
		Index:      75,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCapChanReceive(X[0], X[3])
		},
	},
	ProdTabEntry{
		String: `AssignExpr : id op_assign	<< ast.SkipTokens(X[0], X[1]) >>`,
		Id:         "AssignExpr",
		NTType:     37,
		Index:      76,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `ChannelSend : id op_longlarrow id	<< ast.NewCapChanSend(X[0], X[2]) >>`,
		Id:         "ChannelSend",
		NTType:     38,
		Index:      77,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCapChanSend(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `TypeList : TypeList comma NewLineOpts Type	<< ast.AppendTypeList(X[0], X[3]) >>`,
		Id:         "TypeList",
		NTType:     39,
		Index:      78,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendTypeList(X[0], X[3])
		},
	},
	ProdTabEntry{
		String: `TypeList : Type	<< ast.NewTypeList(X[0]) >>`,
		Id:         "TypeList",
		NTType:     39,
		Index:      79,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewTypeList(X[0])
		},
	},
	ProdTabEntry{
		String: `Type : lparen Type rparen	<< X[1], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      80,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[1], nil
		},
	},
	ProdTabEntry{
		String: `Type : StructType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      81,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : PointerType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      82,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : FunctionType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      83,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : InterfaceType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      84,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : SliceType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      85,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : ChannelType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      86,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : CapChannelType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      87,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : MapType	<< X[0], nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      88,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Type : id	<< ast.NewNamedType(X[0]) >>`,
		Id:         "Type",
		NTType:     40,
		Index:      89,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNamedType(X[0])
		},
	},
	ProdTabEntry{
		String: `Type : kw_int	<< ast.IntType{}, nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      90,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.IntType{}, nil
		},
	},
	ProdTabEntry{
		String: `Type : kw_string	<< ast.StringType{}, nil >>`,
		Id:         "Type",
		NTType:     40,
		Index:      91,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.StringType{}, nil
		},
	},
	ProdTabEntry{
		String: `StructType : kw_struct lcurl NewLineOpts FieldDecls rcurl	<< ast.NewStructType(X[3]) >>`,
		Id:         "StructType",
		NTType:     41,
		Index:      92,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructType(X[3])
		},
	},
	ProdTabEntry{
		String: `StructType : kw_struct lcurl NewLineOpts rcurl	<< ast.NewStructType(make([]ast.StructField, 0)) >>`,
		Id:         "StructType",
		NTType:     41,
		Index:      93,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructType(make([]ast.StructField, 0))
		},
	},
	ProdTabEntry{
		String: `FieldDecls : FieldDecls Terminators FieldDecl	<< ast.AppendStructFields(X[0], X[2]) >>`,
		Id:         "FieldDecls",
		NTType:     42,
		Index:      94,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendStructFields(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `FieldDecls : FieldDecl	<< ast.NewStructFieldList(X[0]) >>`,
		Id:         "FieldDecls",
		NTType:     42,
		Index:      95,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewStructFieldList(X[0])
		},
	},
	ProdTabEntry{
		String: `FieldDecl : IdentifierList Type	<< ast.MakeStructFields(X[0], X[1]) >>`,
		Id:         "FieldDecl",
		NTType:     43,
		Index:      96,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.MakeStructFields(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `PointerType : op_ast Type	<< ast.NewPointerType(X[1]) >>`,
		Id:         "PointerType",
		NTType:     44,
		Index:      97,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewPointerType(X[1])
		},
	},
	ProdTabEntry{
		String: `FunctionType : kw_func Signature	<< ast.NewFunctionType(X[1]) >>`,
		Id:         "FunctionType",
		NTType:     45,
		Index:      98,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFunctionType(X[1])
		},
	},
	ProdTabEntry{
		String: `InterfaceType : kw_interface lcurl NewLineOpts InterfaceMethods rcurl	<< ast.NewInterfaceType(X[2]) >>`,
		Id:         "InterfaceType",
		NTType:     46,
		Index:      99,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewInterfaceType(X[2])
		},
	},
	ProdTabEntry{
		String: `InterfaceType : kw_interface lcurl NewLineOpts rcurl	<< ast.NewInterfaceType(make([]ast.InterfaceMethod, 0)) >>`,
		Id:         "InterfaceType",
		NTType:     46,
		Index:      100,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewInterfaceType(make([]ast.InterfaceMethod, 0))
		},
	},
	ProdTabEntry{
		String: `InterfaceMethods : InterfaceMethods Terminators InterfaceMethod	<< ast.AppendInterfaceMethodList(X[0], X[2]) >>`,
		Id:         "InterfaceMethods",
		NTType:     47,
		Index:      101,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendInterfaceMethodList(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `InterfaceMethods : InterfaceMethod	<< ast.NewInterfaceMethodList(X[0]) >>`,
		Id:         "InterfaceMethods",
		NTType:     47,
		Index:      102,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewInterfaceMethodList(X[0])
		},
	},
	ProdTabEntry{
		String: `InterfaceMethod : id Signature	<< ast.NewInterfaceMethod(X[0], X[1]) >>`,
		Id:         "InterfaceMethod",
		NTType:     48,
		Index:      103,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewInterfaceMethod(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `SliceType : lbrack rbrack Type	<< ast.NewSliceType(X[2]) >>`,
		Id:         "SliceType",
		NTType:     49,
		Index:      104,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewSliceType(X[2])
		},
	},
	ProdTabEntry{
		String: `MapType : kw_map lbrack Type rbrack Type	<< ast.NewMapType(X[2], X[4]) >>`,
		Id:         "MapType",
		NTType:     50,
		Index:      105,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewMapType(X[2], X[4])
		},
	},
	ProdTabEntry{
		String: `ChannelType : kw_chan Type	<< ast.NewChannelType(X[1]) >>`,
		Id:         "ChannelType",
		NTType:     51,
		Index:      106,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewChannelType(X[1])
		},
	},
	ProdTabEntry{
		String: `ChannelType : kw_chan op_larrow Type	<< ast.NewSOChannelType(X[2]) >>`,
		Id:         "ChannelType",
		NTType:     51,
		Index:      107,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewSOChannelType(X[2])
		},
	},
	ProdTabEntry{
		String: `ChannelType : op_larrow kw_chan Type	<< ast.NewROChannelType(X[2]) >>`,
		Id:         "ChannelType",
		NTType:     51,
		Index:      108,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewROChannelType(X[2])
		},
	},
	ProdTabEntry{
		String: `CapChannelType : kw_capchan Type	<< ast.NewCapChanType(X[1]) >>`,
		Id:         "CapChannelType",
		NTType:     52,
		Index:      109,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewCapChanType(X[1])
		},
	},
	ProdTabEntry{
		String: `CapChannelType : kw_capchan op_longlarrow Type	<< ast.NewSOCapChanType(X[2]) >>`,
		Id:         "CapChannelType",
		NTType:     52,
		Index:      110,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewSOCapChanType(X[2])
		},
	},
	ProdTabEntry{
		String: `CapChannelType : op_longlarrow kw_capchan Type	<< ast.NewROCapChanType(X[2]) >>`,
		Id:         "CapChannelType",
		NTType:     52,
		Index:      111,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewROCapChanType(X[2])
		},
	},
	ProdTabEntry{
		String: `Skip : newln	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      112,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : semic	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      113,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_break	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      114,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_capchan	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      115,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_case	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      116,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_chan	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      117,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_const	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      118,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_continue	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      119,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_default	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      120,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_defer	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      121,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_else	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      122,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_fallthrough	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      123,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_for	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      124,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_func	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      125,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_go	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      126,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_goto	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      127,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_if	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      128,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_import	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      129,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_interface	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      130,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_int	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      131,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_make	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      132,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_map	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      133,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_package	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      134,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_range	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      135,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_return	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      136,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_select	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      137,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_struct	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      138,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_string	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      139,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_switch	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      140,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_type	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      141,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : kw_var	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      142,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : ldots	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      143,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : lparen	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      144,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : rparen	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      145,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : lbrack	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      146,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : rbrack	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      147,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : lcurl	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      148,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : rcurl	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      149,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : dot	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      150,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : comma	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      151,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : colon	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      152,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_plus	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      153,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_minus	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      154,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_ast	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      155,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_dash	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      156,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_perc	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      157,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_amp	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      158,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_bar	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      159,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_circ	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      160,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_leftsh	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      161,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_rightsh	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      162,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_ampcirc	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      163,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_pluseq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      164,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_minuseq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      165,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_asteq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      166,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_dasheq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      167,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_perceq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      168,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_ampeq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      169,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_bareq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      170,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_circeq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      171,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_leftsheq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      172,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_rightsheq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      173,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_ampcirceq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      174,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_ampamp	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      175,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_barbar	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      176,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_leftarrow	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      177,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_larrow	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      178,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_longlarrow	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      179,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_plusplus	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      180,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_minusminus	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      181,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_eqeq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      182,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_le	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      183,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_gt	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      184,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_eq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      185,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_not	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      186,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_noteq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      187,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_leq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      188,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_geq	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      189,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : op_assign	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      190,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : int_lit	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      191,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : string_lit	<< ast.SkipTokens(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      192,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipTokens(X[0])
		},
	},
	ProdTabEntry{
		String: `Skip : id	<< ast.SkipId(X[0]) >>`,
		Id:         "Skip",
		NTType:     53,
		Index:      193,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.SkipId(X[0])
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : semic	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      194,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_break	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      195,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_capchan	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      196,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_case	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      197,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_chan	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      198,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_const	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      199,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_continue	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      200,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_default	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      201,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_defer	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      202,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_else	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      203,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_fallthrough	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      204,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_for	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      205,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_func	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      206,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_go	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      207,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_goto	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      208,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_if	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      209,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_import	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      210,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_interface	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      211,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_int	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      212,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_make	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      213,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_map	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      214,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_package	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      215,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_range	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      216,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_return	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      217,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_select	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      218,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_struct	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      219,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_string	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      220,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_switch	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      221,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_type	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      222,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : kw_var	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      223,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : ldots	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      224,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : lparen	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      225,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : rparen	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      226,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : lbrack	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      227,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : rbrack	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      228,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : lcurl	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      229,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : rcurl	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      230,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : dot	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      231,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : comma	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      232,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : colon	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      233,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_plus	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      234,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_minus	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      235,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_ast	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      236,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_dash	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      237,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_perc	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      238,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_amp	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      239,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_bar	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      240,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_circ	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      241,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_leftsh	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      242,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_rightsh	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      243,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_ampcirc	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      244,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_pluseq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      245,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_minuseq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      246,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_asteq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      247,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_dasheq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      248,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_perceq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      249,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_ampeq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      250,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_bareq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      251,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_circeq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      252,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_leftsheq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      253,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_rightsheq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      254,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_ampcirceq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      255,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_ampamp	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      256,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_barbar	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      257,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_leftarrow	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      258,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_larrow	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      259,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_longlarrow	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      260,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_plusplus	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      261,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_minusminus	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      262,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_eqeq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      263,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_le	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      264,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_gt	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      265,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_eq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      266,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_not	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      267,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_noteq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      268,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_leq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      269,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_geq	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      270,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : op_assign	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      271,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : int_lit	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      272,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : string_lit	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      273,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `SkipNoLineBreak : id	<<  >>`,
		Id:         "SkipNoLineBreak",
		NTType:     54,
		Index:      274,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
}
