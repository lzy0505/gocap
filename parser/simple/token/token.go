// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
	"strconv"
	"unicode/utf8"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

// CharLiteralValue returns the string value of the char literal.
func (t *Token) CharLiteralValue() string {
	return string(t.Lit[1 : len(t.Lit)-1])
}

// Float32Value returns the float32 value of the token or an error if the token literal does not
// denote a valid float32.
func (t *Token) Float32Value() (float32, error) {
	if v, err := strconv.ParseFloat(string(t.Lit), 32); err != nil {
		return 0, err
	} else {
		return float32(v), nil
	}
}

// Float64Value returns the float64 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Float64Value() (float64, error) {
	return strconv.ParseFloat(string(t.Lit), 64)
}

// IDValue returns the string representation of an identifier token.
func (t *Token) IDValue() string {
	return string(t.Lit)
}

// Int32Value returns the int32 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Int32Value() (int32, error) {
	if v, err := strconv.ParseInt(string(t.Lit), 10, 64); err != nil {
		return 0, err
	} else {
		return int32(v), nil
	}
}

// Int64Value returns the int64 value of the token or an error if the token literal does not
// denote a valid float64.
func (t *Token) Int64Value() (int64, error) {
	return strconv.ParseInt(string(t.Lit), 10, 64)
}

// UTF8Rune decodes the UTF8 rune in the token literal. It returns utf8.RuneError if
// the token literal contains an invalid rune.
func (t *Token) UTF8Rune() (rune, error) {
	r, _ := utf8.DecodeRune(t.Lit)
	if r == utf8.RuneError {
		err := fmt.Errorf("Invalid rune")
		return r, err
	}
	return r, nil
}

// StringValue returns the string value of the token literal.
func (t *Token) StringValue() string {
	return string(t.Lit[1 : len(t.Lit)-1])
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"newln",
		"semic",
		"empty",
		"kw_package",
		"id",
		"kw_import",
		"lparen",
		"rparen",
		"dot",
		"string_lit",
		"kw_func",
		"comma",
		"...",
		"op_ast",
		"kw_const",
		"op_eq",
		"kw_var",
		"lcurl",
		"rcurl",
		"op_assign",
		"kw_make",
		"kw_capchan",
		"kw_chan",
		"op_longlarrow",
		"kw_int",
		"kw_string",
		"kw_struct",
		"kw_interface",
		"lbrack",
		"rbrack",
		"kw_map",
		"op_larrow",
		"kw_break",
		"kw_case",
		"kw_continue",
		"kw_default",
		"kw_defer",
		"kw_else",
		"kw_fallthrough",
		"kw_for",
		"kw_go",
		"kw_goto",
		"kw_if",
		"kw_range",
		"kw_return",
		"kw_select",
		"kw_switch",
		"kw_type",
		"ldots",
		"colon",
		"op_plus",
		"op_minus",
		"op_dash",
		"op_perc",
		"op_amp",
		"op_bar",
		"op_circ",
		"op_leftsh",
		"op_rightsh",
		"op_ampcirc",
		"op_pluseq",
		"op_minuseq",
		"op_asteq",
		"op_dasheq",
		"op_perceq",
		"op_ampeq",
		"op_bareq",
		"op_circeq",
		"op_leftsheq",
		"op_rightsheq",
		"op_ampcirceq",
		"op_ampamp",
		"op_barbar",
		"op_leftarrow",
		"op_plusplus",
		"op_minusminus",
		"op_eqeq",
		"op_le",
		"op_gt",
		"op_not",
		"op_noteq",
		"op_leq",
		"op_geq",
		"int_lit",
	},

	idMap: map[string]Type{
		"INVALID":        0,
		"$":              1,
		"newln":          2,
		"semic":          3,
		"empty":          4,
		"kw_package":     5,
		"id":             6,
		"kw_import":      7,
		"lparen":         8,
		"rparen":         9,
		"dot":            10,
		"string_lit":     11,
		"kw_func":        12,
		"comma":          13,
		"...":            14,
		"op_ast":         15,
		"kw_const":       16,
		"op_eq":          17,
		"kw_var":         18,
		"lcurl":          19,
		"rcurl":          20,
		"op_assign":      21,
		"kw_make":        22,
		"kw_capchan":     23,
		"kw_chan":        24,
		"op_longlarrow":  25,
		"kw_int":         26,
		"kw_string":      27,
		"kw_struct":      28,
		"kw_interface":   29,
		"lbrack":         30,
		"rbrack":         31,
		"kw_map":         32,
		"op_larrow":      33,
		"kw_break":       34,
		"kw_case":        35,
		"kw_continue":    36,
		"kw_default":     37,
		"kw_defer":       38,
		"kw_else":        39,
		"kw_fallthrough": 40,
		"kw_for":         41,
		"kw_go":          42,
		"kw_goto":        43,
		"kw_if":          44,
		"kw_range":       45,
		"kw_return":      46,
		"kw_select":      47,
		"kw_switch":      48,
		"kw_type":        49,
		"ldots":          50,
		"colon":          51,
		"op_plus":        52,
		"op_minus":       53,
		"op_dash":        54,
		"op_perc":        55,
		"op_amp":         56,
		"op_bar":         57,
		"op_circ":        58,
		"op_leftsh":      59,
		"op_rightsh":     60,
		"op_ampcirc":     61,
		"op_pluseq":      62,
		"op_minuseq":     63,
		"op_asteq":       64,
		"op_dasheq":      65,
		"op_perceq":      66,
		"op_ampeq":       67,
		"op_bareq":       68,
		"op_circeq":      69,
		"op_leftsheq":    70,
		"op_rightsheq":   71,
		"op_ampcirceq":   72,
		"op_ampamp":      73,
		"op_barbar":      74,
		"op_leftarrow":   75,
		"op_plusplus":    76,
		"op_minusminus":  77,
		"op_eqeq":        78,
		"op_le":          79,
		"op_gt":          80,
		"op_not":         81,
		"op_noteq":       82,
		"op_leq":         83,
		"op_geq":         84,
		"int_lit":        85,
	},
}
