// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"terminator",
		"empty",
		"kw_package",
		"id",
		"kw_import",
		"lparen",
		"rparen",
		"dot",
		"string_lit",
		"kw_func",
		"...",
		"comma",
		"{",
		"}",
		":=",
		"kw_make",
		"kw_capchan",
		"kw_chan",
		"<--",
		"kw_int",
		"kw_string",
		"kw_struct",
		"ast",
		"kw_const",
		"kw_interface",
		"kw_type",
		"kw_var",
		"ignored",
	},

	idMap: map[string]Type{
		"INVALID":      0,
		"$":            1,
		"terminator":   2,
		"empty":        3,
		"kw_package":   4,
		"id":           5,
		"kw_import":    6,
		"lparen":       7,
		"rparen":       8,
		"dot":          9,
		"string_lit":   10,
		"kw_func":      11,
		"...":          12,
		"comma":        13,
		"{":            14,
		"}":            15,
		":=":           16,
		"kw_make":      17,
		"kw_capchan":   18,
		"kw_chan":      19,
		"<--":          20,
		"kw_int":       21,
		"kw_string":    22,
		"kw_struct":    23,
		"ast":          24,
		"kw_const":     25,
		"kw_interface": 26,
		"kw_type":      27,
		"kw_var":       28,
		"ignored":      29,
	},
}
