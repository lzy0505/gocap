package main

import ("fmt"
"time"
)

type Integer struct {
	I int
}
func (v Integer) Sendref(c chan *int) {
	fmt.Print("Value before send reference to channel:")
	fmt.Println(v.I)
	a:=&v.I
	c<-a
	time.Sleep(1000*time.Microsecond)
	fmt.Print("One second after send my reference to channel:")
	fmt.Println(v.I)
}

func (v Integer) Receiveref(c chan *int) int {
	a:=<-c
	*a=v.I
	return *a
}

type Obj struct{
	B Integer
	C Integer
}

func (A Obj) test(){
	c:=make(chan *int)
	go A.B.Sendref(c)
	go A.C.Receiveref(c)
	time.Sleep(3000*time.Microsecond)
}

func main() {
	A:=Obj{Integer{0},Integer{1}}
	A.test()
}
