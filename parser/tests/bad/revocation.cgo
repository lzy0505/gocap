package main

import ("fmt"
	"time"
)

type Integer struct {
	I int
	Flag int
}
func (v Integer) Sendcaretaker(c chan func() int, d chan func(int) ) {
	r:=v.read
	w:=v.write
	v.Enable()
	c<-r
	d<-w
	time.Sleep(500*time.Microsecond)
	v.Disable()
	fmt.Print("true value:")
	fmt.Println(v.I)
}

func (v Integer) Receivecaretaker(c chan func() int, d chan func(int) )  {
	read := <-c
	write := <-d
	fmt.Println(read())
	write(-1)
	fmt.Println(read())
	time.Sleep(1000*time.Microsecond)
	write(-2)
	fmt.Println(read())
}

func (v *Integer) read () int{
	if v.Flag>0 {
		return v.I
	}
	return 0
}

func (v *Integer) write (x int) {
	if v.Flag>0 {
		v.I=x
	}
}
func (v *Integer) Enable (){
	v.Flag=1
}

func (v *Integer) Disable (){
	v.Flag=0
}

type Obj struct{
	B Integer
	C Integer
}

func (A Obj) test(){
	c:=make(chan func() int)
	d:=make(chan func(int))
	go A.B.Sendcaretaker(c,d)
	go A.C.Receivecaretaker(c,d)
	time.Sleep(3000*time.Microsecond)
}



func main() {
	A:=Obj{Integer{1,0},Integer{0,0}}
	A.test()
}
